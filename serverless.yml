service: serverless-boilerplate

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'local'}
  region: ${self:custom.extra.REGION}
  apiName: ${self:custom.extra.API_NAME}
  timeout: 300 #Default Lambda timeout
  memorySize: 512 #Default Lambda Memory Size
  versionFunctions: false # No functions versioning
  #role: arn:aws:iam::#{AWS::AccountId}:role/existing-role
  package:
    excludeDevDependencies: true
    exclude:
      - .git/**
      - .vscode/**
      - .test/**
  iamRoleStatements: # Permissions for all of your functions can be set here
  - Effect: Allow
    Action: # Gives permission to DynamoDB tables in a specific region
      - dynamodb:DescribeTable
      - dynamodb:Query
      - dynamodb:Scan
      - dynamodb:GetItem
      - dynamodb:PutItem
      - dynamodb:UpdateItem
      - dynamodb:DeleteItem
    Resource: 'arn:aws:dynamodb:${self:custom.extra.REGION}:*:*'
  - Effect: Allow
    Action: # Gives permission to Lambda execution
      - lambda:InvokeFunction
      - lambda:InvokeAsync
    Resource: "*"
  environment: #Global Environment variables
    ${file(./configs/${opt:stage, 'local'}.yml)}

  # - Effect: Allow
  #   Action: # Gives permission to SQS
  #     - sqs:DeleteMessage
  #     - sqs:ReceiveMessage
  #     - sqs:SendMessage
  #   Resource: arn:aws:sqs:*:*:*

custom:
  region: ${self:provider.region}
  stage: ${self:provider.stage}
  prefix: ${self:custom.stage}-${self:service}
  process: ${self:custom.prefix}-process
  config: ${self:custom.prefix}-config
  sns-logs: ${self:custom.prefix}-trigger-logs
  sqs-logs: ${self:custom.prefix}-messages-logs
  bucketName: ${self:custom.extra.BUCKET_NAME}
  extra: ${file(./configs/${opt:stage, 'local'}.yml)}

  serverless-offline:
    host: '0.0.0.0'
  splitStacks:
    perFunction: true
    perType: true
  # serverless-offline-sqs-esmq:
  #   apiVersion: '2012-11-05'
  #   endpoint: http://sqs:9324
  #   region: sa-east-1
  #   accessKeyId: root
  #   secretAccessKey: root
  dynamodb:
    stages:
      - local
      - test
      - dev
    start:
      host: "dynamo"
      port: 8000
      inMemory: false
      migrate: true
      noStart: true


plugins:
  - serverless-pseudo-parameters
  - serverless-dynamodb-local
  - serverless-offline-scheduler
  # - serverless-offline-sqs-esmq
  - serverless-offline

functions: ${file(serverless-dynamic.js)}

# Infrastrucure - Cloud Formation
resources:  # CloudFormation template syntax
  Resources:
    DemoBucketUpload:
      Type: AWS::S3::Bucket
      Properties:
          BucketName: ${self:custom.bucketName}
    #DynamoDB Books Table
    DynamoDBCatalog:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.extra.DYNAMO_TABLE}
        AttributeDefinitions:
          - AttributeName: hashkey
            AttributeType: S
        KeySchema:
          - AttributeName: hashkey
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 2
          WriteCapacityUnits: 1

    # SQS Queue to Update DynamoDB
    # BooksQueueExample:
    #   Type: AWS::SQS::Queue
    #   Properties:
    #     QueueName: ${self:custom.sqs-logs}
    #     MessageRetentionPeriod: 1209600
    #     VisibilityTimeout: 60
